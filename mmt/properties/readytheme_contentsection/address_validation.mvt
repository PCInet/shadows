<mvt:comment>Organize the Address Validation Data</mvt:comment>
<mvt:assign name="l.settings:address_validation:groups" value="''" />

<mvt:if expr="NOT ISNULL l.settings:customer:validated_ship_addresses">
	<mvt:assign name="l.group:name" value="'Shipping Address'" />
	<mvt:assign name="l.group:prefix" value="'Ship'" />
	<mvt:assign name="l.group:addresses" value="l.settings:customer:validated_ship_addresses" />
	<mvt:assign name="l.group:address_count" value="miva_array_elements( l.settings:customer:validated_ship_addresses )" />
	<mvt:assign name="l.settings:address_validation:group_count" value="miva_array_insert_var( l.settings:address_validation:groups, l.group, -1 )" />
</mvt:if>

<mvt:if expr="NOT ISNULL l.settings:customer:validated_bill_addresses AND g.billing_to_show NE 1">
	<mvt:assign name="l.group:name" value="'Billing Address'" />
	<mvt:assign name="l.group:prefix" value="'Bill'" />
	<mvt:assign name="l.group:addresses" value="l.settings:customer:validated_bill_addresses" />
	<mvt:assign name="l.group:address_count" value="miva_array_elements( l.settings:customer:validated_bill_addresses )" />
	<mvt:assign name="l.settings:address_validation:group_count" value="miva_array_insert_var( l.settings:address_validation:groups, l.group, -1 )" />
</mvt:if>

<mvt:if expr="NOT ISNULL l.settings:addressfields:validated_addresses">
	<mvt:assign name="l.group:name" value="'Address'" />
	<mvt:assign name="l.group:prefix" value="'Ship'" />
	<mvt:assign name="l.group:addresses" value="l.settings:addressfields:validated_addresses" />
	<mvt:assign name="l.group:address_count" value="miva_array_elements( l.settings:addressfields:validated_addresses )" />
	<mvt:assign name="l.settings:address_validation:group_count" value="miva_array_insert_var( l.settings:address_validation:groups, l.group, -1 )" />
</mvt:if>

<mvt:if expr="NOT (l.settings:address_validation:group_count GT 0)">
	<mvt:exit />
</mvt:if>

<mvt:comment>Render the Dialog</mvt:comment>
<div class="c-dialog" data-dialog="address-validation" aria-hidden="true">
	<div class="c-dialog__overlay" tabindex="-1">
		<div class="c-dialog__container u-width-10 u-width-6--s u-width-4--l u-width-3--xl" aria-labelledby="address-validation-title" aria-modal="true" role="alertdialog">
			<header class="c-dialog__header">
				<h2 id="address-validation-title" class="c-dialog__title c-heading-echo">
					Address Verification
				</h2>
				<button class="c-dialog__close" aria-label="Close Dialog" data-dialog-close></button>
			</header>
			<div class="c-dialog__content">
				<p class="c-dialog__description">
					<mvt:assign name="l.settings:address_validation:pluralized_address" value="ternary( l.settings:address_validation:group_count EQ 1, 'address', 'addresses' )" />
					The &mvte:address_validation:pluralized_address; you entered appears to be incorrect or incomplete. Please verify your &mvte:address_validation:pluralized_address; to ensure a timely delivery.
				</p>
				<mvt:foreach iterator="address_validation_group" array="address_validation:groups">
					<mvt:if expr="l.settings:address_validation:group_count GT 1">
						<h3 class="c-dialog__options-title c-heading-foxtrot">&mvte:address_validation_group:name;</h3>
					</mvt:if>
					<div class="c-dialog__options">
						<mvt:foreach iterator="address" array="address_validation_group:addresses">
							<mvt:assign name="l.settings:address:should_check_by_default" value="(l.settings:address_validation_group:address_count EQ 1 AND l.pos2 EQ 1) OR (l.settings:address_validation_group:address_count GT 1 AND l.pos2 EQ 2)" />
							<mvt:assign name="l.settings:address:html:attr:checked" value="ternary( l.settings:address:should_check_by_default, 'checked', '' )" />
							<label class="c-dialog__option">
								<input type="radio" name="&mvte:address_validation_group:prefix;ValidatedSelector" data-mm_address_addr1="&mvte:address:addr1;" data-mm_address_addr2="&mvte:address:addr2;" data-mm_address_city="&mvte:address:city;" data-mm_address_comp="&mvte:address:comp;" data-mm_address_country="&mvte:address:country;" data-mm_address_resdntl="&mvte:address:resdntl;" data-mm_address_state="&mvte:address:state;" data-mm_address_zip="&mvte:address:zip;" &mvte:address:html:attr:checked;>
								<span class="c-dialog__option-title u-text-bold">
									<mvt:if expr="l.settings:address:validated">
										Suggested Address
									<mvt:else>
										You Entered
									</mvt:if>
								</span>
								<div class="c-dialog__option-content">
									<mvt:if expr="NOT ISNULL l.settings:address:comp">
										&mvte:address:comp;<br>
									</mvt:if>
									<mvt:if expr="NOT ISNULL l.settings:address:addr1 OR NOT ISNULL l.settings:address:addr2 OR NOT ISNULL l.settings:address:city OR NOT ISNULL l.settings:address:state OR NOT ISNULL l.settings:address:zip OR NOT ISNULL l.settings:address:cntry OR NOT ISNULL l.settings:address:res">
										&mvte:address:addr1;<br>
										<mvt:if expr="NOT ISNULL l.settings:address:addr2">
											&mvte:address:addr2;<br>
										</mvt:if>
										<mvt:if expr="(NOT ISNULL l.settings:address:city) AND (NOT ISNULL l.settings:address:state)">
											&mvte:address:city;, &mvte:address:state; &mvte:address:zip; &mvte:address:country;
										<mvt:else>
											&mvte:address:city; &mvte:address:state; &mvte:address:zip; &mvte:address:country;
										</mvt:if>
										<mvt:if expr="l.settings:address:resdntl">
											<br>Residential Address
										</mvt:if>
									</mvt:if>
								</div>
							</label>
						</mvt:foreach>
					</div>
				</mvt:foreach>
				<button class="c-dialog__continue c-button c-button--full" data-update-address>Save & Continue</button>
			</div>
		</div>
	</div>
</div>

<mvt:comment>Output the JavaScript</mvt:comment>
<script>
	(function () {
		'use strict';

		const billAddresses = document.querySelectorAll('[name="BillValidatedSelector"]');
		const hasBillAddresses = billAddresses?.length > 0;
		const billingToShow = document.querySelector('#billing_to_show');
		const dialogElement = document.querySelector('[data-dialog="address-validation"]');
		const formElement = document.querySelector('[data-validate-address]');
		const action = formElement?.elements?.Action?.value;
		const shipAddresses = document.querySelectorAll('[name="ShipValidatedSelector"]');
		const update = document.querySelector('[data-update-address]');
		let billPrefix;
		let shipPrefix;

		if (action === 'ORDR') {
			billPrefix = 'Bill';
			shipPrefix = 'Ship';
		}
		else if (['ICST', 'UCST'].includes(action)) {
			billPrefix = 'Customer_Bill';
			shipPrefix = 'Customer_Ship';
		}
		else if (['ICSA', 'UCSA'].includes(action)) {
			billPrefix = null;
			shipPrefix = 'Address_';
		}

		function findFormInputs(form, prefix) {
			return {
				billing: {
					addr1: form.elements[prefix + 'Address1'],
					addr2: form.elements[prefix + 'Address2'],
					city: form.elements[prefix + 'City'],
					state: form.elements[prefix + 'State'],
					stateSelect: form.elements[prefix + 'StateSelect'],
					country: form.elements[prefix + 'Country'],
					zip: form.elements[prefix + 'Zip'],
					validated: form.elements[prefix + 'Validated']
				},
				shipping: {
					addr1: form.elements[prefix + 'Address1'],
					addr2: form.elements[prefix + 'Address2'],
					city: form.elements[prefix + 'City'],
					state: form.elements[prefix + 'State'],
					stateSelect: form.elements[prefix + 'StateSelect'],
					country: form.elements[prefix + 'Country'],
					zip: form.elements[prefix + 'Zip'],
					validated: form.elements[prefix + 'Validated']
				}
			};
		}

		function getSelectedAddress(addresses = shipAddresses) {
			const address = Array.from(addresses).find(function (address) {
				return address?.checked;
			});

			return {
				addr1: address?.dataset?.mm_address_addr1 ?? '',
				addr2: address?.dataset?.mm_address_addr2 ?? '',
				city: address?.dataset?.mm_address_city ?? '',
				state: address?.dataset?.mm_address_state ?? '',
				country: address?.dataset?.mm_address_country ?? '',
				zip: address?.dataset?.mm_address_zip ?? ''
			};
		}

		update.addEventListener('click', function (clickEvent) {
			clickEvent.preventDefault();

			const selectedShipAddress = getSelectedAddress(shipAddresses);

			findFormInputs(formElement, shipPrefix).shipping.addr1.value = selectedShipAddress.addr1;
			findFormInputs(formElement, shipPrefix).shipping.addr2.value = selectedShipAddress.addr2;
			findFormInputs(formElement, shipPrefix).shipping.city.value = selectedShipAddress.city;
			findFormInputs(formElement, shipPrefix).shipping.state.value = selectedShipAddress.state;
			findFormInputs(formElement, shipPrefix).shipping.stateSelect.value = selectedShipAddress.state;
			findFormInputs(formElement, shipPrefix).shipping.country.value = selectedShipAddress.country;
			findFormInputs(formElement, shipPrefix).shipping.zip.value = selectedShipAddress.zip;

			if (billPrefix !== null) {
				const selectedBillAddress = hasBillAddresses ? getSelectedAddress(billAddresses) : selectedShipAddress;

				findFormInputs(formElement, billPrefix).billing.addr1.value = selectedBillAddress.addr1;
				findFormInputs(formElement, billPrefix).billing.addr2.value = selectedBillAddress.addr2;
				findFormInputs(formElement, billPrefix).billing.city.value = selectedBillAddress.city;
				findFormInputs(formElement, billPrefix).billing.state.value = selectedBillAddress.state;
				findFormInputs(formElement, billPrefix).billing.stateSelect.value = selectedBillAddress.state;
				findFormInputs(formElement, billPrefix).billing.country.value = selectedBillAddress.country;
				findFormInputs(formElement, billPrefix).billing.zip.value = selectedBillAddress.zip;
			}

			formElement.submit();
		});

		/**
			 * When closing the dialog, set the hidden input confirming that
			 * the address has been validated to `0`.
			 */
		dialogElement.addEventListener('hide', function () {
			findFormInputs(formElement, shipPrefix).shipping.validated.value = 0;
			if (hasBillAddresses) {
				findFormInputs(formElement, billPrefix).billing.validated.value = 0;
			}
		});

		/**
			* On page load, open the dialog
			*/
		window.addEventListener('load', function () {
			const billMatchesShip = billingToShow && !hasBillAddresses;
			if (billMatchesShip) {
				billingToShow.checked = true;
				billingToShow.dispatchEvent(new Event('click'));
			}

			window.openDialog('address-validation');
		});
	}());
</script>